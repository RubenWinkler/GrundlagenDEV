/*

Quelle: https://www.w3schools.com/css/css3_animations.asp

=== VIDEO 1: Die Grundlagen ===

- mit Animationen kann man sich Elemente flüssig
von einem zum anderen Zustand verändern lassen (z.B. rot -> grün)

- mit Animations kann man so viele CSS-Eigenschaften animieren wie man will
und so oft wie man will

- um Animations zu nutzen muss man sogenannte Keyframs spezifizieren

- Keyframes sind sozusagen die Schlüsselzustände der Animation
(z.B. rot -> grün -> blau)

- Keyframes legen als fest welche CSS-Eigenschaften das animierte Element wann hat

- mit Keyframes spezifiziert man sozusagen die eigentliche Animation,
die Animation kann man dann in einem Element verwenden

- animation referenziert den Namen der Animation
- animation-duration legt den Zeitrau der Animation fest
(wird dies nicht spezifiziert, gibt es keine Animation, da Default 0s ist)

*/

div {
  width: 200px;
  height: 200px;
  background-color: red;
  margin-bottom: 2rem;
}

@keyframes farbwechsel {
  from {background-color: red;} /* from entspricht 0% */
  to {background-color: blue;}  /* to entspricht 100% */
}

#test01 {
  animation: farbwechsel;
  animation-duration: 4s;
}

@keyframes regenbogen {
  0% {background-color: red;}
  17% {background-color: orange;}
  34% {background-color: yellow;}
  51% {background-color: green;}
  68% {background-color: lightblue;}
  85% {background-color: indigo;}
  100% {background-color: violet;}
}

#test02 {
  animation: regenbogen;
  animation-duration: 5s;
}

/* === VIDEO 2: Komplexere Animationen === */

@keyframes komplexereAnimation {
  0% {background-color: red; top: 0; left: 0; width: 200px; height: 200px;}
  25% {background-color: orange; top: 0; left: 400px; width: 100px; height: 100px;}
  50% {background-color: yellow; top: 400px; left: 400px; width: 200px; height: 200px;}
  75% {background-color: green; top: 400px; left: 0; width: 300px; height: 300px;}
  100% {background-color: lightblue; top: 0; left: 0; width: 200px; height: 200px;}
}

#test03 {
  position: relative;
  animation: komplexereAnimation;
  animation-duration: 5s;
}

/* === VIDEO 3: Animationen verzögern, wiederholen und umkehren === */

#test04 {
  position: relative;
  animation: komplexereAnimation;
  animation-duration: 5s;
  animation-delay: 2s; /* sowohl positive als auch negative Werte */
}

#test05 {
  position: relative;
  animation: komplexereAnimation;
  animation-duration: 5s;
  animation-iteration-count: infinite; /* Anzahl der Wiederholungen oder infinite*/
}

#test06 {
  position: relative;
  animation: komplexereAnimation;
  animation-duration: 5s;
  animation-direction: reverse; /* normal, reverse, alternate, alternate-reverse */
}

/* === VIDEO 4: Geschwindigkeitskurven, Füllmodus und Pausieren === */

#test07 {
  position: relative;
  animation: komplexereAnimation;
  animation-duration: 5s;
  animation-timing-function: ease-in-out;
}

/*
ease - Specifies an animation with a slow start, then fast, then end
slowly (this is default)
linear - Specifies an animation with the same speed from start to end
ease-in - Specifies an animation with a slow start
ease-out - Specifies an animation with a slow end
ease-in-out - Specifies an animation with a slow start and end
cubic-bezier(n,n,n,n) - Lets you define your own values in a cubic-bezier function
*/

#test08 {
  position: relative;
  animation: komplexereAnimation;
  animation-duration: 5s;
  animation-fill-mode: forwards;
}

/*
none - Default value. Animation will not apply any styles to the element before
or after it is executing
forwards - The element will retain the style values that is set by the last
keyframe (depends on animation-direction and animation-iteration-count)
backwards - The element will get the style values that is set by the first keyframe
(depends on animation-direction), and retain this during the animation-delay period
both - The animation will follow the rules for both forwards and backwards, extending
the animation properties in both directions
*/

#test09 {
  position: relative;
  animation: komplexereAnimation;
  animation-duration: 5s;
  animation-play-state: paused; /* play oder pause*/
}

/* === VIDEO 5: Die Kurzschreibweise === */

#test10 {
  position: relative;
  animation: komplexereAnimation;
}

/* animation: name duration timing-function delay iteration-count direction fill-mode play-state; */
